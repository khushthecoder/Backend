/**
 * This file contains the route handler for creating a new Todo item in MySQL.
 *
 * Step-by-step explanation:
 *
 * 1. import the database connection from models/todo.js which includes
 *    the schema and the MySQL connection.
 *
 * 2. The `createTodo` function is defined as an async function because
 *    database operations are asynchronous.
 *
 * 3. Inside `createTodo`:
 *    - We extract `title` and `description` from the request body (req.body).
 *    - We run an SQL query using `db.query()`:
 *         INSERT INTO todos (title, description) VALUES (?, ?)
 *      - The `?` placeholders are replaced safely by the values inside the array `[title, description]`.
 *      - This helps prevent SQL Injection.
 *
 * 4. The result of the query contains an `insertId` which is the auto-incremented ID
 *    generated by MySQL for the new row.
 *
 * 5. If the insertion is successful:
 *    - We send a `201 Created` response with a success message
 *      and return the newly created Todo data (id, title, description).
 *
 * 6. If an error occurs:
 *    - We catch it and return a `500 Internal Server Error` response
 *      along with the error message.
 *
 * This function will be exported so that it can be used in routes
 * (e.g., inside an Express route like POST /todos).
 */

const db = require("../models/todo"); // connect with todo.js (schema + db connection)

// Route handler to create a new Todo
const createTodo = async (req, res) => {
  try {
    const { title, description } = req.body;

    // Insert query into MySQL
    const [result] = await db.query(
      "INSERT INTO todos (title, description) VALUES (?, ?)",
      [title, description]
    );

    // Send success response
    res.status(201).json({
      message: "Todo created successfully",
      data: {
        id: result.insertId,
        title,
        description,
      },
    });
  } catch (err) {
    // Send error response
    res.status(500).json({
      message: "Error creating todo",
      error: err.message,
    });
  }
};

module.exports = { createTodo };
